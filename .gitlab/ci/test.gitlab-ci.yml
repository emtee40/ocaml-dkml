variables:
  PACKAGE_REGISTRY_URL_BASE: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/release"

test:
  extends:
    - .alpine:before-sphinx
  stage: test
  script:
  - echo Building Sphinx html twice so that Sphinx cross-references work ...
  - make -C contributors html ; make -C contributors html O="-W"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

.installer-unix:
  artifacts:
    untracked: false
    when: always
    expire_in: "30 days"
    paths:
      - dkml-native-*.tar.gz
      - build/pkg/bump/*/publish/change.md
      - build/pkg/bump/.ci/o/log
      - build/pkg/bump/*/sw/logs

installer-windows_x86_64:
  # Needs more than 2 hours, which is GitLab SaaS limit as of 2023-11-24. See https://gitlab.com/groups/gitlab-org/-/epics/2162
  allow_failure: true
  extends:
    - .windows:before-script-shared-setupmachine
  stage: build
  timeout: 3h
  artifacts:
    untracked: false
    when: always
    expire_in: "30 days"
    paths:
      - C:/build/pkg/bump/.ci/o/*/share/dkml-installer-ocaml-*/t
      - C:/build/pkg/bump/.ci/o/log
      - C:/build/pkg/bump/*/sw/logs
  script:
  # Identity for dkml-compiler git-based patches
  - if ("$CI_NO_MODIFY_MACHINE" -ne 1) { git config --global user.email "anyone@example.com" }

  - cmake --preset ci-reproduce-windows-c -G Ninja
  - cmake --build --preset ci-reproduce-windows-c

  - copy C:/build/pkg/bump/.ci/o/*/share/dkml-installer-ocaml-*/t/unsigned-dkml-native-windows_x86_64-*.exe .

installer-oldolddebian_x86_64:
  extends:
    - .cmake-with-opam-prereqs-oldolddebian:before
    - .installer-unix
  stage: build
  script:
  # Identity for dkml-compiler git-based patches
  - if ("$CI_NO_MODIFY_MACHINE" -ne 1) { git config --global user.email "anyone@example.com" }

  - .ci/cmake/bin/cmake --preset ci-reproduce -G Ninja -D DKML_HOST_LINUX_DOCKER=0
  - sh ci/build-unix-targz.sh linux_x86_64

installer-darwin_x86_64:
  # This architecture has problems building with an old, patched version of `ctypes.0.19.2`. There is no problem with `darwin_arm64`. So likely easy to fix but low-priority.
  allow_failure: true
  extends:
    - .cmake-with-opam-prereqs-macos:build
    - .installer-unix
  stage: build
  variables:
    HOMEBREW_NO_INSTALL_CLEANUP: 1
  script:
  # Identity for dkml-compiler git-based patches
  - if ("$CI_NO_MODIFY_MACHINE" -ne 1) { git config --global user.email "anyone@example.com" }

  - .ci/cmake/bin/cmake --preset ci-reproduce -G Ninja -D DKML_HOST_ABI=darwin_x86_64 -D DKML_TARGET_ABI=darwin_x86_64
  - sh ci/build-unix-targz.sh darwin_x86_64

installer-darwin_arm64:
  extends:
    - .cmake-with-opam-prereqs-macos:build
    - .installer-unix
  stage: build
  variables:
    HOMEBREW_NO_INSTALL_CLEANUP: 1
  script:
  # Identity for dkml-compiler git-based patches
  - if ("$CI_NO_MODIFY_MACHINE" -ne 1) { git config --global user.email "anyone@example.com" }

  - .ci/cmake/bin/cmake --preset ci-reproduce -G Ninja -D DKML_HOST_ABI=darwin_arm64 -D DKML_TARGET_ABI=darwin_arm64
  - sh ci/build-unix-targz.sh darwin_arm64

installer-linux_x86_64:
  # This architecture is built with ManyLinux 2014, which has an ancient glibc so it is portable to most Linux distros.
  # However, ocaml-lsp-server.1.16.2 submodules the `lev` package which does not compile with ManyLinux. Unclear why but not investigating because very low-priority.
  # Ditto for Dune's vendored `spawn`.
  allow_failure: true
  extends:
    - .linux:setup-dkml-no-matrix
    - .installer-unix
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    # We just need manylinux (some ancient Linux) so that linux_x86_64
    # binaries are portable. All OCaml bits are done by DkSDK.
    PRIMARY_SWITCH_SKIP_INSTALL: 'true'
    SKIP_OPAM_MODIFICATIONS: 'true'
    MANYLINUX: "true"
    DOCKER_TLS_CERTDIR: "/certs"
    dockcross_image_custom_prefix: ""

    dkml_host_os: 'linux'
    opam_root_cacheable: '.ci/o'
    abi_pattern: 'manylinux2014-linux_x86_64'
    comment: '(CentOS 7, etc.)'
    bootstrap_opam_version: '2.2.0-alpha-20221228'
    dkml_host_abi: 'linux_x86_64'
    opam_root: '.ci/o'
    dockcross_image: 'dockcross/manylinux2014-x64'
    dockcross_run_extra_args: '--platform linux/amd64'
    #   Extra packages for ManyLinux (_yum). The _apt is for completeness.
    #   sqlite-devel: needed by dkml-component-staging-desktop-full > conf-sqlite3
    #   libX11-devel: needed by dkml-component-staging-desktop-full > graphics > conf-libX11
    #   pkgconfig: needed by dkml-component-staging-desktop-full > conf-sqlite3 > conf-pkg-config
    #   gcc-c++: needed by mccs > conf-c++
    #   libffi-dev: needed by ctypes-foreign > conf-libffi
    dockcross_packages_apt: 'libsqlite3-dev libx11-dev pkg-config libffi-devel'
    dockcross_packages_yum: 'sqlite-devel libX11-devel pkgconfig gcc-c++ libffi-devel'
    in_docker: 'true'

  stage: build
  dependencies: []
  script:
    - .ci/sd4/opamrun/cmdrun sh ./dk dksdk.cmake.copy QUIET
    - .ci/sd4/opamrun/cmdrun cmake --preset ci-reproduce -G Ninja -D SKIP_CMDRUN=1 -D DKML_HOST_LINUX_DOCKER=0
    - .ci/sd4/opamrun/cmdrun sh ci/build-unix-targz.sh linux_x86_64

# ------------------------------------------------------------------------
# Tests
# ------------------------------------------------------------------------
#
# Why are these separate from [stage: build]?
# 1. Different paths on different machines means that hardcoded library locations
#    can be tested. For example, ci/test.sh has to use CAML_LD_LIBRARY_PATH
#    to work correctly when the test machine is different from the build machine.
#    That betters simulates real end-user requirements.
# 2. If the build succeeds but the test fails, we have the job artifacts from the
#    build job so we can re-run the tests locally.

test-darwin_arm64:
  extends:
    - .cmake-with-opam-prereqs-macos:build
  needs:
    - job: installer-darwin_arm64
      artifacts: true
  script: sh ci/test.sh darwin_arm64

test-oldolddebian_x86_64-on-debian_x86_64:
  extends:
    - .cmake-with-opam-prereqs-debian:before
  stage: test
  needs:
    - job: installer-oldolddebian_x86_64
      artifacts: true
  script: sh ci/test.sh linux_x86_64

# TODO: When linux_x86_64 job fixed.
#
# test-linux_x86_64-on-debian_x86_64:
#   extends:
#     - .cmake-with-opam-prereqs-debian:before
#   stage: test
#   needs:
#     - job: installer-linux_x86_64
#       artifacts: true
#   script: sh ci/test.sh linux_x86_64

test-sanity-docker-amd64: # This tests GLIBC and basic sanity; it is not an exhaustive test.
  parallel:
    matrix:
    - image: debian:oldoldstable-slim
      packages: debian
    - image: debian:stable-slim
      packages: debian
    - image: ubuntu:focal
      packages: debian
    - image: ubuntu:latest
      packages: debian
    # - image: centos:7 # won't work until entire DkML can work with manylinux-2014. but EOL June 30, 2024.
    #   packages: redhat
    - image: redhat/ubi8
      packages: redhat
    # - image: amazonlinux:1 # won't work until entire DkML can work with manylinux-2014. but deprecated anyway
    #   packages: amazon
    # - image: amazonlinux:2 # won't work until entire DkML can work with manylinux-2014
    #   packages: amazon
    - image: amazonlinux:2023
      packages: amazon

  image: $image
  stage: test
  needs:
    - job: installer-oldolddebian_x86_64
      artifacts: true
  script:
    - |
      case $packages in
        debian) apt-get update -y && apt-get install curl git build-essential unzip -y ;;
        redhat) yum install curl git gcc gcc-c++ make unzip diffutils patch bzip2 -y ;;
        amazon) yum install tar git gcc gcc-c++ make unzip diffutils patch bzip2 -y ;;
      esac
    - sh ci/test-sanity-docker-linux_x86_64.sh

upload:
  stage: upload
  image: curlimages/curl:latest
  needs:
    - job: test-oldolddebian_x86_64-on-debian_x86_64      
    - job: installer-oldolddebian_x86_64
      artifacts: true
    - job: installer-darwin_arm64
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - ver=$(sh ci/get-version.sh)
    - echo "Uploading version $ver"
    - 'for f in dkml-native-*.tar.gz; do curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "$f" "$PACKAGE_REGISTRY_URL_BASE/$ver/$f"; done'

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: upload
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Running the release job. Expect it to fail with already-existing release until Package-Stage11-CreateRelease can be migrated completely (the Windows job must succeed; wait until next release of SaaS which has 3hr timeout)"
    - ver=$(sh ci/get-version.sh)
    - echo "Releasing version $ver"
    - |
      release-cli create --name "DkML $CI_COMMIT_TAG" --tag-name "$CI_COMMIT_TAG" --ref "$CI_COMMIT_SHA" \
        --description build/pkg/bump/$ver/publish/change.md \
        --assets-link "{\"link_type\":\"package\",\"name\":\"Windows/Intel 64-bit Native Installer\",     \"url\":\"$PACKAGE_REGISTRY_URL_BASE/unsigned-dkml-native-windows_x86_64-i-$ver.exe\",\"filepath\":\"/unsigned-dkml-native-windows_x86_64-i-$ver.exe\",}" \
        --assets-link "{\"link_type\":\"package\",\"name\":\"Windows/Intel 64-bit Native Uninstaller\",   \"url\":\"$PACKAGE_REGISTRY_URL_BASE/unsigned-dkml-native-windows_x86_64-u-$ver.exe\",\"filepath\":\"/unsigned-dkml-native-windows_x86_64-u-$ver.exe\",}" \
        --assets-link "{\"link_type\":\"package\",\"name\":\"Windows/Intel 64-bit Bytecode Installer\",   \"url\":\"$PACKAGE_REGISTRY_URL_BASE/unsigned-dkml-byte-windows_x86_64-i-$ver.exe\",\"filepath\":\"/unsigned-dkml-byte-windows_x86_64-i-$ver.exe\",}" \
        --assets-link "{\"link_type\":\"package\",\"name\":\"Windows/Intel 64-bit Bytecode Uninstaller\", \"url\":\"$PACKAGE_REGISTRY_URL_BASE/unsigned-dkml-byte-windows_x86_64-u-$ver.exe\",\"filepath\":\"/unsigned-dkml-byte-windows_x86_64-u-$ver.exe\",}" \
        --assets-link "{\"link_type\":\"package\",\"name\":\"macOS/Silicon 64-bit Installer\",            \"url\":\"$PACKAGE_REGISTRY_URL_BASE/dkml-native-darwin_arm64-i-$ver.tar.gz\",\"filepath\":\"/dkml-native-darwin_arm64-i-$ver.tar.gz\",}" \
        --assets-link "{\"link_type\":\"package\",\"name\":\"DebianOldOld/Intel 64-bit Installer\",       \"url\":\"$PACKAGE_REGISTRY_URL_BASE/dkml-native-linux_x86_64-i-$ver.tar.gz\",\"filepath\":\"/dkml-native-linux_x86_64-i-$ver.tar.gz\",}"
