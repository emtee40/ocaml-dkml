opam-version: "2.0"
# Composite version format is M.N.O~vA.B.C[~prelP]
# where:
# - M.N.O is OCaml compiler version
# - A.B.C is the DKML version of the dkml-runtime-common
# - P is optional DKML prerelease version
# Examples:
# - 4.14.0~prerel69 (legacy format) < 4.14.0~v0.4.0 < 4.14.0~v0.4.1~prerel69 < 4.14.0~v0.4.1
# Confer: Version Ordering in https://opam.ocaml.org/doc/Manual.html#Package-Formulas
synopsis: "OCaml cross-compiler and libraries from the DKML distribution that works with at least Win32 and macOS"
description:
  """The DKML distribution of the OCaml bytecode and native compiler, Stdlib and the other OCaml libraries (str, unix, bigarray, etc.).
A cross-compiler for macOS x86_64 to macOS arm64 is included; for build consistency the regular OCaml compiler will be for x86_64 regardless of whether the build machine is Apple Silicon.
Install with something like: opam switch create dkml-4.14.0 '--formula="dkml-base-compiler" {>= "4.14.0~" & < "4.13.0~"}'"""
maintainer: ["opensource+diskuv-ocaml@support.diskuv.com"]
authors: ["Diskuv, Inc. <opensource+diskuv-ocaml@support.diskuv.com>"]
license: "Apache-2.0"
homepage: "https://github.com/diskuv/dkml-compiler"
bug-reports: "https://github.com/diskuv/dkml-compiler/issues"
depends: [
  "ocaml" {= "4.14.0" & post}

  "base-unix" {post}
  "base-bigarray" {post}
  "base-threads" {post}

  "dkml-runtime-common-native" {= "1.1.0~prerel25"}
]
depopts: [
  "ocaml-option-32bit"
  "dkml-option-debuginfo"
  "dkml-option-minsize"
]
conflict-class: "ocaml-core-compiler"
flags: [ compiler avoid-version ]
available: [
  opam-version >= "2.1.0" &
  ( (arch = "x86_64" & (os = "linux" | os = "win32" | os = "macos")) |
    (arch = "x86_32" & (os = "linux" | os = "win32")) |
    (arch = "arm64" & os = "macos") )
]
build: [
  # Dump Homebrew, which is needed for reproducible build auditing in drc's crossplatform-functions.sh.
  ["sh" "scripts/macos-bundle-dump.sh"] {os = "macos"}

  # OCaml source code
  ["install" "-d" "dl/ocaml/flexdll"]
  ["tar" "xCfz" "dl/ocaml"          "dl/ocaml.tar.gz"   "--strip-components=1"]
  ["tar" "xCfz" "dl/ocaml/flexdll"  "dl/flexdll.tar.gz" "--strip-components=1"]

  # Create a DKMLDIR. Its structure mimics a git submodule setup.
  #   <dkmldir>/.dkmlroot
  ["install" "-d" "dkmldir"]
  #     4.14.0~v0.4.1          --dkml-semver--> 0.4.1
  #     4.14.0~v0.4.1~prerel69 --dkml-semver--> 0.4.1-prerel69
  ["sh" "-eufc" "printf 'dkml_root_version=%s\\n' '%{version}%' | sed 's/[0-9.]*~v//; s/~/-/' > dkmldir/.dkmlroot"]

  #   <dkmldir>/vendor/drc/
  ["install" "-d" "dkmldir/vendor/drc"]
  #     tar through pipe is essentially an rsync (without requiring rsync)
  ["sh" "-eufc" "tar cCf '%{dkml-runtime-common-native:lib}%/' - . | tar xCf dkmldir/vendor/drc/ -"]

  #   <dkmldir>/vendor/dkml-compiler/
  ["install" "-d" "dkmldir/vendor/dkml-compiler/src" "dkmldir/vendor/dkml-compiler/env"]
  #     only the standard compiler environment is needed for the base compiler. However options play a part.
  ["sh" "-eufc"
    # https://learn.microsoft.com/en-us/cpp/build/reference/z7-zi-zi-debug-information-format?view=msvc-170
    "sed s/^INJECT_CFLAGS=$/INJECT_CFLAGS='-Z7'/ env/standard-compiler-env-to-ocaml-configure-env.sh > dkmldir/vendor/dkml-compiler/env/standard-compiler-env-to-ocaml-configure-env.sh"
  ] {dkml-option-debuginfo:installed & os = "win32"}
  ["sh" "-eufc"
    # -Os optimizes for size. Useful for CPUs with small cache sizes. Confer https://wiki.gentoo.org/wiki/GCC_optimization
    "sed s/^INJECT_CFLAGS=$/INJECT_CFLAGS='-Os'/ env/standard-compiler-env-to-ocaml-configure-env.sh > dkmldir/vendor/dkml-compiler/env/standard-compiler-env-to-ocaml-configure-env.sh"
  ] {dkml-option-minsize:installed & os = "linux"}
  ["install"
    # default (unpatched) options
    "env/standard-compiler-env-to-ocaml-configure-env.sh"
    "dkmldir/vendor/dkml-compiler/env/"
  ] { !dkml-option-debuginfo:installed & !dkml-option-minsize:installed }
  #     tar through pipe is essentially an rsync (without requiring rsync)
  ["sh" "-eufc" "tar cCf src/ - . | tar xCf dkmldir/vendor/dkml-compiler/src/ -"]
]
install: [
  # Run r-c-ocaml-1-setup.sh
  [
    "env" "TOPDIR=dkmldir/vendor/drc/all/emptytop"
      "DKML_REPRODUCIBLE_SYSTEM_BREWFILE=%{_:build}%/Brewfile"
      "dkmldir/vendor/dkml-compiler/src/r-c-ocaml-1-setup.sh"
      "-d" "dkmldir"
      "-t" "%{prefix}%"
      "-f" "src-ocaml"
      "-g" "%{_:share}%/mlcross"
      "-v" "dl/ocaml"
      "-z"
      #   Host architectures
      "-ewindows_x86"     { os = "win32" & (arch = "x86_32" |  ocaml-option-32bit:installed) }
      "-ewindows_x86_64"  { os = "win32" & (arch = "x86_64" & !ocaml-option-32bit:installed) }      
      "-elinux_x86"       { os = "linux" & (arch = "x86_32" |  ocaml-option-32bit:installed) }
      "-elinux_x86_64"    { os = "linux" & (arch = "x86_64" & !ocaml-option-32bit:installed) }
      "-edarwin_x86_64"   { os = "macos" & arch = "x86_64" }
      "-edarwin_arm64"    { os = "macos" & arch = "arm64" }
      #   Target architectures (if cross-compiling; similar to dkml-component-staging-ocamlrun.opam)
      #     TODO: With the -adarwin_x86_64 configuration below, an Apple Silicon machine will produce an arm64 ocamlopt.opt
      #     in the staging-files/darwin_arm64 directory,
      #     and that ocamlopt.opt will create x86_64 OCaml native executables. So that darwin_arm64/bin/ocamlopt.opt will not
      #     run on an x86_64 machine.
      #     The -adarwin_arm64 configuration is similar but has one important difference. The config will produce an x86_64
      #     ocamlopt.opt, in the staging-files/darwin_x86_64 directory, and that ocamlopt.opt will create arm64 OCaml native
      #     executables. But that darwin_x86_64/bin/ocamlopt.opt _will_ run on almost _all_ Apple Silicon (arm64) machines
      #     because of Rosetta2. The only major exception is Opam CI has disabled Rosetta2 as of Nov 8, 2022.
      #     Ideally we would have [-aHOST] and [-aHOST-TARGET]. That is: -adarwin_x86_64, -adarwin_arm64 and
      #     -adarwin_x86_64-darwin_arm64. But that cross specification has ripple effects that needs time (technical debt) to
      #     get right. Luckily our build machines are always Apple x86_64 (GitHub Actions and GitLab CI/CD), and even if the
      #     build machines were Apple Silicon we typically only care about the generated artifacts (the target ABI).
      "-adarwin_x86_64=vendor/dkml-compiler/env/standard-compiler-env-to-ocaml-configure-env.sh" { os = "macos" & arch = "arm64" }
      "-adarwin_arm64=vendor/dkml-compiler/env/standard-compiler-env-to-ocaml-configure-env.sh"  { os = "macos" & arch = "x86_64" }
      #     TODO: Would be nice to bundle the 3 Android cross-compilers here since they are already supported
      #     by DKML, but I (jonahbeckford@) doubt there is an Android NDK available on the Opam hosts.
      #     Confer: https://github.com/diskuv/diskuv-ocaml-ghmirror/runs/4831077050
      #     Perhaps the Android NDK should just be downloaded via an 'android-option-ndk23' package? That would give control of the NDK version.
      # "-aandroid_arm64v8a=vendor/dkml-compiler/env/github-actions-ci-to-ocaml-configure-env.sh;android_x86_64=vendor/dkml-compiler/env/github-actions-ci-to-ocaml-configure-env.sh"] { os = "linux" & !ocaml-option-32bit:installed }
      # "-aandroid_arm32v7a=vendor/dkml-compiler/env/github-actions-ci-to-ocaml-configure-env.sh" { os = "linux" & ocaml-option-32bit:installed }
      "-k" "vendor/dkml-compiler/env/standard-compiler-env-to-ocaml-configure-env.sh"
  ]

  # Run r-c-ocaml-2-build_host-noargs.sh
  [
    "sh" "-eufc"
    """
    cd '%{prefix}%'
    share/dkml/repro/100co/vendor/dkml-compiler/src/r-c-ocaml-2-build_host-noargs.sh
    """
  ]

  # Run r-c-ocaml-3-build_cross-noargs.sh (typically a no-op unless we are cross-compiling)
  [
    "sh" "-eufc"
    """
    cd '%{prefix}%'
    share/dkml/repro/100co/vendor/dkml-compiler/src/r-c-ocaml-3-build_cross-noargs.sh
    """
  ]
]
dev-repo: "git+https://github.com/diskuv/dkml-compiler.git"
extra-source "dl/ocaml.tar.gz" {
  src: "https://github.com/ocaml/ocaml/archive/4.14.0.tar.gz"
  checksum: "sha256=39f44260382f28d1054c5f9d8bf4753cb7ad64027da792f7938344544da155e8"
}
extra-source "dl/flexdll.tar.gz" {
  src: "https://github.com/alainfrisch/flexdll/archive/0.42.tar.gz"
  checksum: "sha256=a2dce0a0d2f2c5c9f52f65e281db7405f51ff22dc71cdbf494eb241c8a4bdf0f"
}
extra-source "dl/homebrew-bundle.tar.gz" {
  src: "https://github.com/Homebrew/homebrew-bundle/archive/4756e4c4cf95485c5ea4da27375946c1dac2c71d.tar.gz"
  checksum: [
    "sha256=10c024ca7871cea36b4c27b2601971d3fa6cba6f37855613baf0026d0f555e76"
  ]
}
url {
  src: "https://github.com/diskuv/dkml-compiler/archive/refs/tags/1.1.0-prerel25.tar.gz"
  checksum: [
    "sha256=23c65499da88e1d5ebfc8db92d4fbe0ab76fdfd9347eb143352ca51766af8fd6"
  ]
}
