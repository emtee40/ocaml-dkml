##########################################################################
# File: dktool/cmake/scripts/dkml/workflow/compilers-gitlab-ci.in.yml    #
#                                                                        #
# Copyright 2022 Diskuv, Inc.                                            #
#                                                                        #
# Licensed under the Apache License, Version 2.0 (the "License");        #
# you may not use this file except in compliance with the License.       #
# You may obtain a copy of the License at                                #
#                                                                        #
#     http://www.apache.org/licenses/LICENSE-2.0                         #
#                                                                        #
# Unless required by applicable law or agreed to in writing, software    #
# distributed under the License is distributed on an "AS IS" BASIS,      #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        #
# implied. See the License for the specific language governing           #
# permissions and limitations under the License.                         #
#                                                                        #
##########################################################################

# Updating
# --------
#
# 1. Delete this file.
# 2. Run dk with your original arguments:
#        ./dk dkml.workflow.compilers CI GitLab PRERELEASE
#    or get help to come up with new arguments:
#        ./dk dkml.workflow.compilers HELP

stages:
  - build
  - test
  - deploy
  - upload
  - release

include:
  - local: '.ci/dkml-compilers/gl/setup-dkml.gitlab-ci.yml'
  - local: .gitlab/ci/pages.gitlab-ci.yml
  - local: .gitlab/ci/test.gitlab-ci.yml

# win32:build:
#   extends: .win32:setup-dkml
#   script:
#     - msys64\usr\bin\bash -lc "ci/build-test.sh"

# linux:build:
#   extends: .linux:setup-dkml
#   script:
#     - sh ci/build-test.sh

# # Exclude macOS until you have a https://gitlab.com/gitlab-com/runner-saas-macos-access-requests/-/issues approved!
# macos:build:
#   extends: .macos:setup-dkml
#   # prettier-ignore
#   parallel:
#     matrix: [
#       { dkml_host_os: 'darwin',
#         opam_root_cacheable: '${CI_PROJECT_DIR}/.ci/o',
#         abi_pattern: 'macos-darwin_all',
#         gl_image: 'macos-12-xcode-14',
#         bootstrap_opam_version: '2.2.0-alpha-20221228',
#         dkml_host_abi: 'darwin_arm64',
#         opam_root: '${CI_PROJECT_DIR}/.ci/o' },

#     ]
#   tags: [saas-macos-medium-m1]
#   script:
#     - sh ci/build-test.sh

variables:
  GIT_SUBMODULE_STRATEGY: recursive

.alpine:before-sphinx:
  image: python:3.9-alpine

  before_script:
    - apk add --no-cache git make rsync graphviz
    - pip install -U sphinx sphinx_rtd_theme

.cmake-with-opam-prereqs-anydebian:before:
  variables:
    DEBIAN_FRONTEND: noninteractive # for apt-get
  before_script:
    # Update/install system pkgs first, so conda can use latest system pkgs.
    - apt-get update
    # Install Ninja and C compiler
    #   ninja-build: CMake configure
    #   build-essential: CMake project(LANGUAGES C)
    #   git: CMake FetchContent()
    #   unzip: needed by opam
    #   libsqlite3-dev: needed by dkml-component-staging-desktop-full > conf-sqlite3
    #   libx11-dev: needed by dkml-component-staging-desktop-full > graphics > conf-libX11
    #   pkg-config: needed by dkml-component-staging-desktop-full > conf-sqlite3 > conf-pkg-config
    #   libffi-dev: needed by ctypes-foreign > conf-libffi
    #   zlib1g-dev: needed by tiny_httpd_camlzip > camlzip
    - apt-get install -qq -o=Dpkg::Use-Pty=0 ninja-build build-essential git unzip libsqlite3-dev libx11-dev pkg-config libffi-dev zlib1g-dev > /dev/null
    # Install CMake
    - ./dk dksdk.cmake.link QUIET

.cmake-with-opam-prereqs-debian:before:
  image: debian:stable-slim
  extends:
    - .cmake-with-opam-prereqs-anydebian:before

.cmake-with-opam-prereqs-olddebian:before:
  image: debian:oldstable-slim
  extends:
    - .cmake-with-opam-prereqs-anydebian:before

.cmake-with-opam-prereqs-oldolddebian:before:
  image: debian:oldoldstable-slim
  extends:
    - .cmake-with-opam-prereqs-anydebian:before

.cmake-with-opam-prereqs-macos:build:
  tags: [saas-macos-medium-m1]
  image: macos-12-xcode-14
  before_script:
    #   ninja: CMake configure
    #   gpatch: needed by opam
    #   unzip: needed by opam
    #   pkg-config: needed by dkml-component-staging-desktop-full > conf-sqlite3 > conf-pkg-config
    #   xquartz: needed by graphics > conf-libX11
    #   sqlite: {provided by macos} needed by dkml-component-staging-desktop-full > conf-sqlite3
    #   git: {already installed by GitLab} CMake FetchContent()
    #   libffi: needed by ctypes-foreign > conf-libffi
    #   zlib: needed by tiny_httpd_camlzip > camlzip
    - brew install ninja gpatch unzip pkg-config xquartz libffi zlib
    # Install CMake
    - ./dk dksdk.cmake.link QUIET

.shared_windows_runners: # Cost to spin up Windows runner is up to 3.5 minutes as of 2021-09-14.
  # https://gitlab.com/gitlab-org/ci-cd/shared-runners/images/gcp/windows-containers/-/tree/main/cookbooks/preinstalled-software
  tags:
    - shared-windows
    - windows
    - windows-1809

.diskuv_windows_runners:
  # Capabilities:
  # - Windows 10
  # - official Git 2.33.0.2+ for Windows
  tags:
    - diskuv
    - windows
    - windows-1809

.win32:hardware:
  # Old. 2h timeout. VS 2019. tags: [shared-windows, windows, windows-1809]
  tags: [diskuv, windows] # 4h timeout. VS 2019.
  # tags: [diskuv, windows, windows-vm] # 4h timeout. But virtualbox is 10X slower because Snail mode (no Hyper-V support) and Docker Windows breaks b/c https://github.com/moby/moby/issues/37024
  # tags: [saas-windows-medium-amd64] # 2h timeout.
  variables:
    # Opam on Windows is mostly I/O bound but default is relative to CPU cores.
    OPAMJOBS: 8
    # Leave machine alone for [diskuv]
    CI_NO_MODIFY_MACHINE: 1

    # # ---- saas-windows-medium-amd64 ----
    # # Apparently `Get-CompatibleVisualStudios -ErrorIfNotFound` is failing to find VS 2022
    # # on GitLab.
    # # Confer: https://gitlab.com/diskuv/distributions/1.0/dksdk-coder/-/jobs/6407506414
    # # So manually set the Visual Studio variables.
    # #
    # # export VS_DIR='C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools'
    # # export VS_VCVARSVER='14.29'
    # # export VS_WINSDKVER='10.0.19041.0'
    # # export VS_MSVSPREFERENCE='VS16.11'
    # # export VS_CMAKEGENERATOR='Visual Studio 16 2019'
    # vsstudio_dir: C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools
    # vsstudio_vcvarsver: '14.38'
    # #   From the following component ids:
    # #     Microsoft.VisualStudio.Component.Windows11SDK.22621
    # #     Microsoft.VisualStudio.Component.Windows10SDK
    # vsstudio_winsdkver: '10.0.22621.0'
    # vsstudio_msvspreference: 'VS17.8'
    # vsstudio_cmakegenerator: 'Visual Studio 17 2022'

.before_windows: &before-windows
  - date
  - '[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12' # From https://www.msys2.org/docs/ci/#docker, but useful for everything
  - $DKML_CI_PROJECT_PATH_URLENCODED = [uri]::EscapeDataString($env:CI_PROJECT_PATH) # Must be url-encoded per https://docs.gitlab.com/ee/user/packages/generic_packages/
  - $PACKAGE_REGISTRY_GENERIC_URL = "${env:CI_API_V4_URL}/projects/$DKML_CI_PROJECT_PATH_URLENCODED/packages/generic"
  - '$GLAB_CURL_HEADER = "JOB-TOKEN: ${env:CI_JOB_TOKEN}"'

  - $ErrorActionPreference = 'Stop'
  - $ProgressPreference = 'SilentlyContinue'

  # ----------- Chocolatey --------------
  - |
    $oldeap = $ErrorActionPreference; $ErrorActionPreference = "SilentlyContinue";
    & where.exe choco 2> $null;
    $ErrorActionPreference = oldeap;
    if ($LastExitCode -ne 0) {
      if (Test-Path "C:\ProgramData\chocolatey\helpers\chocolateyProfile.psm1") {
        echo "The GitLab runner has Chocolatey but has not been restarted to reflect the new PATH. Will trigger a PowerShell session refresh until you have restarted it."
      } else {
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'));
      }
      Import-Module "C:\ProgramData\chocolatey\helpers\chocolateyProfile.psm1";
      refreshenv;
    } else {
      echo "Found Chocolatey";
    }
  - date

  # ----------- Curl -----------

  # curl is a built-in Powershell Alias. Want real curl.exe!
  # - Remove-Item Alias:curl

  # ----------- release-cli -----------

  # https://docs.gitlab.com/ee/ci/yaml/index.html#release-cli-for-shell-executors
  - $EXTRASRC = "$PWD\_ci"
  - if (!(Test-Path "$EXTRASRC")) { New-Item -Path "$EXTRASRC" -ItemType Directory }
  - $RELCLI = "$EXTRASRC\releasecli"
  - if (!(Test-Path "$RELCLI")) { New-Item -Path "$RELCLI" -ItemType Directory }
  - if (!(Test-Path "$RELCLI\release-cli.exe")) { Invoke-WebRequest -Uri "https://release-cli-downloads.s3.amazonaws.com/latest/release-cli-windows-amd64.exe" -OutFile "$RELCLI\release-cli.exe" }
  - $env:PATH += ";$RELCLI"
  - release-cli -v
  - date

.before_setupmachine: &before-setupmachine
  # ninja needed for 'cmake -G Ninja' (on GitLab Windows SaaS the default generator would be Visual Studio 2019 ... aka. MSBuild)
  - choco upgrade ninja -y --no-progress

.windows:before-script-shared-setupmachine:
  extends:
  - .win32:hardware
  before_script:
    - *before-windows
    - *before-setupmachine
