# setup-dkml
#   Short form: sd4

name: post-dkml
author: Diskuv, Inc.
description: Teardown after building OCaml native executables for Darwin

runs:
  using: "composite"

  steps:
    - name: Full matrix variables
      shell: bash
      # Every matrix variable lookup in this Action should use the output of this step. Even
      # the matrix variables that the user must specify (ex. dkml_host_abi) should be
      # referenced using [steps.full_matrix_vars.outputs.dkml_host_abi] rather than
      # [matrix.dkml_host_abi] so that there is a single place to edit for variable changes.
      id: full_matrix_vars
      run: |
        # Select correct Darwin matrix variables
        {% for (abi,abi_vars) in gh_vars %}{%- if abi_vars.dkml_host_os == "darwin" -%}{{ nl }}        {% for (name,value) in abi_vars %}{{ name }}={{ squot }}{{ value }}{{ squot }} {%- if loop.last %} {%- else -%} {%- endif %}{{ nl }}        {% endfor %}{%- endif %}{% endfor %}#
        #   note: All Darwin machines can cross-compile so they are equal except [dkml_host_abi].
        dkml_host_abi='{% raw -%}${{ matrix.dkml_host_abi }}{%- endraw %}'

        add() {
          echo "$1=$2" | tee -a $GITHUB_OUTPUT | tee -a $GITHUB_ENV
        }

        add dkml_host_abi "$dkml_host_abi"
        add abi_pattern "$abi_pattern"
        add opam_root "$opam_root"
        add opam_root_cacheable "$opam_root_cacheable"
        add exe_ext "${exe_ext:-}"
        add ocaml_options "${ocaml_options:-}"

    - name: Teardown DkML build apparatus
      shell: bash
      env:
        _STUB_FOR_AUTOGEN: "ON" # {# only here so that the autogen below is valid YAML in the template file #}

        # autogen from global_env_vars.{% for var in global_env_vars %}{{ nl }}        {{ var.name }}: {{ squot }}{{ var.value }}{{ squot }}{% endfor %}
      run: |
        sh .ci/sd4/run-teardown-dkml.sh GITHUB_WORKSPACE "$GITHUB_WORKSPACE"
